/*
 *  Config
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Copyright (C) 2016 EPAM Systems Inc.
 */

#ifndef SRC_CONFIG_HPP_
#define SRC_CONFIG_HPP_

#include <exception>
#include <memory>
#include <string>

#include <libconfig.h++>

#include <xen/be/Log.hpp>

/***************************************************************************//**
 * @defgroup config Config
 * Config related classes.
 ******************************************************************************/

/***************************************************************************//**
 * Exception generated by Config class.
 * @ingroup config
 ******************************************************************************/
class ConfigException : public std::exception
{
public:

	explicit ConfigException(const std::string& msg) : mMsg(msg) {};
	virtual ~ConfigException() {}

	/**
	 * returns error message
	 */
	const char* what() const throw() { return mMsg.c_str(); };

private:
	std::string mMsg;
};

/***************************************************************************//**
 * Provides different settings for backends.
 * @ingroup config
 ******************************************************************************/
class Config
{
public:

	/**
	 * Display modes
	 */
	enum class DisplayMode
	{
		DRM,   //!< DRM
		WAYLAND//!< Wayland
	};

	struct Connector
	{
		std::string id;
		std::string name;
		uint32_t surfaceId;
	};

	struct Input
	{
		std::string id;
		std::string device;
		std::string connector;
	};

	/**
	 * @param fileName
	 */
	Config(const std::string& fileName);

	/**
	 * Returns display mode
	 */
	DisplayMode displayMode() const { return mDisplayMode; }

	/**
	 * Returns connector parameters
	 * @param[out] connectors connector parameters
	 */
	void getConnectors(std::vector<Connector>& connectors);

	/**
	 * Returns keyboard parameters
	 * @param[out] keyboards keyboard parameters
	 */
	void getKeyboards(std::vector<Input>& keyboards);

	/**
	 * Returns pointer parameters
	 * @param[out] pointers pointer parameters
	 */
	void getPointers(std::vector<Input>& pointers);

	/**
	 * Returns touch parameters
	 * @param[out] touches touch parameters
	 */
	void getTouches(std::vector<Input>& touches);

private:

	const char* cDefaultCfgName = "displ_be.cfg";

	XenBackend::Log mLog;
	libconfig::Config mConfig;

	DisplayMode mDisplayMode;

	DisplayMode readDisplayMode();
	void getInputs(std::vector<Input>& inputs, const std::string& sectionName);
};

typedef std::shared_ptr<Config> ConfigPtr;

#endif /* SRC_CONFIG_HPP_ */
