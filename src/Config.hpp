/*
 *  Config
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Copyright (C) 2016 EPAM Systems Inc.
 */

#ifndef SRC_CONFIG_HPP_
#define SRC_CONFIG_HPP_

#include <exception>
#include <memory>
#include <string>

#include <libconfig.h++>

#include <xen/be/Log.hpp>

/***************************************************************************//**
 * @defgroup config Config
 * Config related classes.
 ******************************************************************************/

/***************************************************************************//**
 * Exception generated by Config class.
 * @ingroup config
 ******************************************************************************/
class ConfigException : public std::exception
{
public:

	explicit ConfigException(const std::string& msg) : mMsg(msg) {};
	virtual ~ConfigException() {}

	/**
	 * returns error message
	 */
	const char* what() const throw() { return mMsg.c_str(); };

private:
	std::string mMsg;
};

/***************************************************************************//**
 * Provides different settings for backends.
 * @ingroup config
 ******************************************************************************/
class Config
{
public:

	/**
	 * Display modes
	 */
	enum class DisplayMode
	{
		DRM,   //!< DRM
		WAYLAND//!< Wayland
	};

	/**
	 * @param fileName
	 */
	Config(const std::string& fileName);

	/**
	 * Returns display mode
	 */
	DisplayMode displayMode() const { return mDisplayMode; }

	/**
	 * Returns number of defined display domains
	 */
	int displayDomsCount() const { return mDisplayDomainsCount; }

	/**
	 * Returns domain parameters
	 * @param[in]  idx    domain index
	 * @param[out] name   domain name
	 */
	void displayDomParams(int idx, std::string& name, uint16_t& devId,
						  int& connectorsCount);

	/**
	 * Returns connector name for specified frontend
	 * @param[in] domName domain name
	 * @param[in] devId   device id
	 * @param[in] idx     connector index
	 * @return connector name
	 */
	std::string displayDomConnectorName(const std::string& domName,
										uint16_t devId,
										int idx);

	/**
	 * Returns number of defined input domains
	 */
	int inputDomsCount() const { return mInputDomainsCount; }

	/**
	 * Returns index of domain and devId in input domains
	 */
	int inputDomIndex(const std::string& domName, uint16_t devId) const;

	/**
	 * Returns parameters of defined domain keyboard
	 * @param[in]  idx     domain index
	 * @param[out] device  input device name /dev/input/event...
	 * @param[out] connector wl connector
	 */
	void inputKeyboard(int idx, std::string& device, std::string& connector);

	/**
	 * Returns parameters of defined domain pointer
	 * @param[in]  idx     domain index
	 * @param[out] device  input device name /dev/input/event...
	 * @param[out] connector wl connector
	 */
	void inputPointer(int idx, std::string& device, std::string& connector);

	/**
	 * Returns parameters of defined domain touch
	 * @param[in]  idx     domain index
	 * @param[out] device  input device name /dev/input/event...
	 * @param[out] connector wl connector
	 */
	void inputTouch(int idx, std::string& device, std::string& connector);

private:

	const char* cDefaultCfgName = "displ_be.cfg";

	XenBackend::Log mLog;
	libconfig::Config mConfig;

	DisplayMode mDisplayMode;
	int mDisplayDomainsCount;
	int mInputDomainsCount;

	void initCachedValues();
	DisplayMode readDisplayMode();
	int readSectionCount(const std::string& sectionName);
	void readInputParams(int idx, const std::string& paramName,
						 std::string& device, std::string& connector);
	libconfig::Setting& findSettingByDomain(const std::string& sectionName,
											const std::string& domName,
											uint16_t devId,
											int& index) const;
};

typedef std::shared_ptr<Config> ConfigPtr;

#endif /* SRC_CONFIG_HPP_ */
